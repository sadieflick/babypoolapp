--- auth.py	2025-05-08 01:16:00
+++ auth.py	2025-05-08 01:16:00
@@ -235,14 +235,14 @@
 
         # Create tokens with 30-day expiration for guests (longer than hosts)
         access_token = create_access_token(
-            identity=user.id,
+            identity=str(user.id),  # Convert to string to satisfy JWT requirements
             additional_claims={
                 'is_host': user.is_host,
                 'email': user.email
             },
             expires_delta=timedelta(days=30)
         )
         refresh_token = create_refresh_token(
-            identity=user.id,
+            identity=str(user.id),  # Convert to string to satisfy JWT requirements
             additional_claims={
                 'is_host': user.is_host,
                 'email': user.email
@@ -366,14 +366,14 @@
         
         # Create tokens with 30-day expiration for guests (longer than hosts)
         access_token = create_access_token(
-            identity=user.id,
+            identity=str(user.id),  # Convert to string to satisfy JWT requirements
             additional_claims={
                 'is_host': user.is_host,
                 'email': user.email
             },
             expires_delta=timedelta(days=30)
         )
         refresh_token = create_refresh_token(
-            identity=user.id,
+            identity=str(user.id),  # Convert to string to satisfy JWT requirements
             additional_claims={
                 'is_host': user.is_host,
                 'email': user.email
@@ -521,14 +521,14 @@
     
     # Create tokens with 30-day expiration for guests (longer than hosts)
     access_token = create_access_token(
-        identity=user.id,
+        identity=str(user.id),  # Convert to string to satisfy JWT requirements
         additional_claims={
             'is_host': user.is_host,
             'email': user.email
         },
         expires_delta=timedelta(days=30)
     )
     refresh_token = create_refresh_token(
-        identity=user.id,
+        identity=str(user.id),  # Convert to string to satisfy JWT requirements
         additional_claims={
             'is_host': user.is_host,
             'email': user.email
@@ -589,7 +589,7 @@
     current_user_identity = get_jwt_identity()
     
     # Create a new access token
-    access_token = create_access_token(identity=current_user_identity)
+    access_token = create_access_token(identity=str(current_user_identity))
     
     # Create response with the new token
     response = jsonify({